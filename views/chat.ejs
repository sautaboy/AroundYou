<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Professional Chat | <%= currentUser.username %></title>
    <link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600&display=swap">
    <style>
        :root {
            --primary-color: #4361ee;
            --primary-dark: #3a56d4;
            --text-primary: #2b3445;
            --text-secondary: #5f6d7e;
            --bg-primary: #ffffff;
            --bg-secondary: #f8f9fa;
            --border-color: #e0e3e7;
            --success-color: #28a745;
            --error-color: #dc3545;
            --warning-color: #ffc107;
        }

        * {
            box-sizing: border-box;
            margin: 0;
            padding: 0;
        }

        body {
            font-family: 'Inter', -apple-system, BlinkMacSystemFont, sans-serif;
            background-color: var(--bg-secondary);
            color: var(--text-primary);
            line-height: 1.6;
            -webkit-font-smoothing: antialiased;
        }

        .container {
            display: flex;
            justify-content: center;
            align-items: center;
            min-height: 100vh;
            padding: 20px;
        }

        .chat-app {
            width: 100%;
            max-width: 800px;
            background: var(--bg-primary);
            border-radius: 12px;
            box-shadow: 0 4px 24px rgba(0, 0, 0, 0.08);
            overflow: hidden;
            display: flex;
            flex-direction: column;
            height: 90vh;
        }

        .chat-header {
            padding: 20px;
            background: var(--primary-color);
            color: white;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .chat-header h2 {
            font-weight: 600;
            font-size: 1.25rem;
        }

        .user-info {
            display: flex;
            align-items: center;
            gap: 10px;
        }

        .user-avatar {
            width: 36px;
            height: 36px;
            border-radius: 50%;
            background-color: rgba(255, 255, 255, 0.2);
            display: flex;
            align-items: center;
            justify-content: center;
            font-weight: 500;
        }

        .chat-status {
            padding: 12px 20px;
            background-color: var(--bg-secondary);
            border-bottom: 1px solid var(--border-color);
            font-size: 0.875rem;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .status-indicator {
            display: flex;
            align-items: center;
            gap: 8px;
        }

        .indicator-dot {
            width: 8px;
            height: 8px;
            border-radius: 50%;
            background-color: var(--success-color);
        }

        .chat-messages {
            flex: 1;
            padding: 20px;
            overflow-y: auto;
            background-color: var(--bg-primary);
        }

        .message {
            margin-bottom: 16px;
            max-width: 70%;
            padding: 12px 16px;
            border-radius: 12px;
            position: relative;
            word-wrap: break-word;
        }

        .received {
            background-color: var(--bg-secondary);
            border-top-left-radius: 4px;
            margin-right: auto;
        }

        .sent {
            background-color: var(--primary-color);
            color: white;
            border-top-right-radius: 4px;
            margin-left: auto;
        }

        .message-info {
            display: flex;
            justify-content: space-between;
            margin-bottom: 6px;
            font-size: 0.75rem;
            color: var(--text-secondary);
        }

        .sent .message-info {
            color: rgba(255, 255, 255, 0.8);
        }

        .message-content {
            line-height: 1.5;
        }

        .chat-input-area {
            padding: 16px;
            border-top: 1px solid var(--border-color);
            background-color: var(--bg-primary);
        }

        .chat-form {
            display: flex;
            gap: 12px;
        }

        .message-input {
            flex: 1;
            padding: 12px 16px;
            border: 1px solid var(--border-color);
            border-radius: 8px;
            font-size: 0.9375rem;
            outline: none;
            transition: border-color 0.2s;
        }

        .message-input:focus {
            border-color: var(--primary-color);
            box-shadow: 0 0 0 2px rgba(67, 97, 238, 0.2);
        }

        .send-button {
            padding: 12px 24px;
            background-color: var(--primary-color);
            color: white;
            border: none;
            border-radius: 8px;
            font-size: 0.9375rem;
            font-weight: 500;
            cursor: pointer;
            transition: background-color 0.2s;
        }

        .send-button:hover {
            background-color: var(--primary-dark);
        }

        .send-button:disabled {
            background-color: var(--border-color);
            cursor: not-allowed;
        }

        .chat-closed {
            padding: 20px;
            text-align: center;
            background-color: #fff8e6;
            border-radius: 8px;
            margin: 20px;
            border: 1px solid var(--warning-color);
        }

        .chat-closed h3 {
            color: var(--warning-color);
            margin-bottom: 12px;
        }

        .countdown {
            font-weight: 600;
            color: var(--text-primary);
        }

        .logout-btn {
            display: inline-flex;
            align-items: center;
            gap: 6px;
            padding: 8px 16px;
            background-color: transparent;
            color: var(--text-secondary);
            border: 1px solid var(--border-color);
            border-radius: 6px;
            font-size: 0.875rem;
            text-decoration: none;
            transition: all 0.2s;
        }

        .logout-btn:hover {
            background-color: var(--bg-secondary);
            color: var(--error-color);
            border-color: var(--error-color);
        }

        .timestamp {
            font-size: 0.75rem;
            opacity: 0.7;
        }

        @media (max-width: 768px) {
            .chat-app {
                height: 100vh;
                border-radius: 0;
            }
            
            .message {
                max-width: 85%;
            }
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="chat-app">
            <div class="chat-header">
                <h2>Professional Chat</h2>
                <div class="user-info">
                    <div class="user-avatar"><%= currentUser.username.charAt(0).toUpperCase() %></div>
                    <span><%= currentUser.username %></span>
                </div>
            </div>

            <div class="chat-status">
                <div class="status-indicator">
                    <div class="indicator-dot"></div>
                    <% if(chatOpen){ %>
                        <span>Chat is active</span>
                    <% } else { %>
                        <span>Chat is closed</span>
                    <% } %>
                </div>
                <a href="/logout" class="logout-btn">
                    <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                        <path d="M9 21H5a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h4"></path>
                        <polyline points="16 17 21 12 16 7"></polyline>
                        <line x1="21" y1="12" x2="9" y2="12"></line>
                    </svg>
                    Logout
                </a>
            </div>

            <% if(!chatOpen){ %>
                <div class="chat-closed">
                    <h3>Chat is currently closed</h3>
                    <p>The chat is available daily from 9:00 AM to 5:00 PM</p>
                    <p class="countdown" id="countdown">Opens in 8 hours 23 minutes</p>
                </div>
            <% } %>

            <div class="chat-messages" id="messages">
                <!-- Messages will appear here -->
            </div>

            <% if(chatOpen){ %>
                <div class="chat-input-area">
                    <form class="chat-form" id="messageForm" autocomplete="off">
                        <input type="text" class="message-input" id="messageInput" placeholder="Type your message..." autocomplete="off" required>
                        <button type="submit" class="send-button">Send</button>
                    </form>
                </div>
            <% } %>
        </div>
    </div>

    <script src="/socket.io/socket.io.js"></script>
    <script>
        const socket = io();
        const messagesDiv = document.getElementById('messages');
        const form = document.getElementById('messageForm');
        const input = document.getElementById('messageInput');
        let userLocation = null;

        // Format timestamp
        function formatTime(date) {
            return new Date(date).toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });
        }

        // Update countdown timer
        function updateCountdown() {
            const countdownEl = document.getElementById('countdown');
            if (!countdownEl) return;
            
            const now = new Date();
            let nextOpen = new Date();
            nextOpen.setHours(9, 0, 0, 0);
            
            // If it's already past 9 AM today, set for tomorrow
            if (now.getHours() >= 9) {
                nextOpen.setDate(now.getDate() + 1);
            }
            
            const diff = nextOpen - now;
            const hrs = Math.floor(diff / 1000 / 60 / 60);
            const mins = Math.floor((diff / 1000 / 60) % 60);
            
            countdownEl.textContent = `Opens in ${hrs} hours ${mins} minutes`;
        }

        if (!<%= chatOpen %>) {
            updateCountdown();
            setInterval(updateCountdown, 60000); // Update every minute
        }

        // Get user location
        function getLocation() {
            return new Promise((resolve, reject) => {
                if (navigator.geolocation) {
                    navigator.geolocation.getCurrentPosition(
                        position => resolve({
                            lat: position.coords.latitude,
                            lng: position.coords.longitude
                        }),
                        error => {
                            console.error('Geolocation error:', error);
                            // Show a more professional error message
                            const errorMessage = document.createElement('div');
                            errorMessage.className = 'message received';
                            errorMessage.innerHTML = `
                                <div class="message-info">
                                    <span>System</span>
                                    <span class="timestamp">${formatTime(new Date())}</span>
                                </div>
                                <div class="message-content">
                                    Please enable location services to participate in the chat.
                                </div>
                            `;
                            messagesDiv.appendChild(errorMessage);
                            messagesDiv.scrollTop = messagesDiv.scrollHeight;
                            reject(error);
                        },
                        { timeout: 10000 }
                    );
                } else {
                    reject(new Error('Geolocation is not supported by this browser.'));
                }
            });
        }

        // Initialize chat
        async function initChat() {
            try {
                userLocation = await getLocation();
                await fetch('/update-location', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ 
                        latitude: userLocation.lat, 
                        longitude: userLocation.lng 
                    })
                });
                socket.emit('joinNearby');
            } catch (error) {
                console.error('Location error:', error);
            }
        }

        // Receive past messages
        socket.on('pastMessages', messages => {
            messagesDiv.innerHTML = '';
            messages.forEach(msg => {
                const messageClass = msg.username === '<%= currentUser.username %>' ? 'sent' : 'received';
                const messageElement = document.createElement('div');
                messageElement.className = `message ${messageClass}`;
                messageElement.innerHTML = `
                    <div class="message-info">
                        <span>${msg.username}</span>
                        <span class="timestamp">${formatTime(msg.timestamp)}</span>
                    </div>
                    <div class="message-content">${msg.msg}</div>
                `;
                messagesDiv.appendChild(messageElement);
            });
            messagesDiv.scrollTop = messagesDiv.scrollHeight;
        });

        // Receive new messages
        socket.on('message', data => {
            const messageClass = data.user === '<%= currentUser.username %>' ? 'sent' : 'received';
            const messageElement = document.createElement('div');
            messageElement.className = `message ${messageClass}`;
            messageElement.innerHTML = `
                <div class="message-info">
                    <span>${data.user}</span>
                    <span class="timestamp">${formatTime(data.timestamp)}</span>
                </div>
                <div class="message-content">${data.msg}</div>
            `;
            messagesDiv.appendChild(messageElement);
            messagesDiv.scrollTop = messagesDiv.scrollHeight;
        });

        // Send message
        if (form) {
            form.addEventListener('submit', async (e) => {
                e.preventDefault();
                if (!input.value.trim()) return;
                
                if (!userLocation) {
                    try {
                        userLocation = await getLocation();
                        await fetch('/update-location', {
                            method: 'POST',
                            headers: { 'Content-Type': 'application/json' },
                            body: JSON.stringify({ 
                                latitude: userLocation.lat, 
                                longitude: userLocation.lng 
                            })
                        });
                    } catch (error) {
                        console.error('Failed to get location:', error);
                        return;
                    }
                }
                
                socket.emit('message', input.value.trim(), userLocation);
                input.value = '';
                input.focus();
            });
        }

        // Initialize the chat when the page loads
        document.addEventListener('DOMContentLoaded', initChat);
    </script>
</body>
</html>