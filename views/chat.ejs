<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Around You | <%= currentUser.username %></title>
    <link
      rel="stylesheet"
      href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600&display=swap"
    />
    <style>
      :root {
        --primary-color: #4361ee;
        --primary-dark: #3a56d4;
        --text-primary: #232946;
        --text-secondary: #5f6d7e;
        --bg-primary: rgba(255, 255, 255, 0.85);
        --bg-secondary: #f4f6fb;
        --border-color: #e0e3e7;
        --success-color: #28a745;
        --error-color: #dc3545;
        --warning-color: #ffc107;
        --glass-blur: blur(12px);
        --shadow: 0 8px 32px rgba(67, 97, 238, 0.1);
      }

      * {
        box-sizing: border-box;
        margin: 0;
        padding: 0;
      }

      body {
        font-family: "Inter", -apple-system, BlinkMacSystemFont, sans-serif;
        background: linear-gradient(135deg, #e0e7ff 0%, #f4f6fb 100%);
        color: var(--text-primary);
        min-height: 100vh;
        -webkit-font-smoothing: antialiased;
      }

      .container {
        display: flex;
        justify-content: center;
        align-items: center;
        min-height: 100vh;
        padding: 20px;
      }

      .chat-app {
        width: 100%;
        max-width: 800px;
        background: var(--bg-primary);
        border-radius: 18px;
        box-shadow: var(--shadow);
        overflow: hidden;
        display: flex;
        flex-direction: column;
        height: 90vh;
        backdrop-filter: var(--glass-blur);
        border: 1.5px solid rgba(67, 97, 238, 0.08);
        transition: box-shadow 0.2s;
      }

      .chat-header {
        padding: 24px 28px;
        background: linear-gradient(
          90deg,
          var(--primary-color) 60%,
          #6c63ff 100%
        );
        color: white;
        display: flex;
        justify-content: space-between;
        align-items: center;
        box-shadow: 0 2px 12px rgba(67, 97, 238, 0.08);
      }

      .chat-header h2 {
        font-weight: 700;
        font-size: 1.35rem;
        letter-spacing: 1px;
      }

      .user-info {
        display: flex;
        align-items: center;
        gap: 12px;
      }

      .user-avatar {
        width: 40px;
        height: 40px;
        border-radius: 50%;
        background: linear-gradient(135deg, #a5b4fc 0%, #4361ee 100%);
        display: flex;
        align-items: center;
        justify-content: center;
        font-weight: 600;
        color: #fff;
        font-size: 1.2rem;
        box-shadow: 0 2px 8px rgba(67, 97, 238, 0.1);
        border: 2px solid #fff;
      }

      .chat-status {
        padding: 14px 24px;
        background: rgba(244, 246, 251, 0.85);
        border-bottom: 1px solid var(--border-color);
        font-size: 0.97rem;
        display: flex;
        justify-content: space-between;
        align-items: center;
      }

      .status-indicator {
        display: flex;
        align-items: center;
        gap: 8px;
      }

      .indicator-dot {
        width: 10px;
        height: 10px;
        border-radius: 50%;
        background-color: var(--success-color);
        box-shadow: 0 0 6px 2px rgba(40, 167, 69, 0.15);
      }

      .chat-messages {
        flex: 1;
        padding: 28px 24px 18px 24px;
        overflow-y: auto;
        background: transparent;
        display: flex;
        flex-direction: column;
        gap: 0.5rem;
        scroll-behavior: smooth;
      }

      .message {
        margin-bottom: 10px;
        max-width: 70%;
        padding: 14px 18px;
        border-radius: 16px;
        position: relative;
        word-wrap: break-word;
        box-shadow: 0 2px 8px rgba(67, 97, 238, 0.07);
        transition: background 0.2s;
        animation: fadeIn 0.4s;
      }

      .received {
        background: rgba(244, 246, 251, 0.95);
        border-top-left-radius: 6px;
        margin-right: auto;
        color: var(--text-primary);
      }

      .sent {
        background: linear-gradient(
          135deg,
          var(--primary-color) 70%,
          #6c63ff 100%
        );
        color: white;
        border-top-right-radius: 6px;
        margin-left: auto;
      }

      .message-info {
        display: flex;
        justify-content: space-between;
        margin-bottom: 6px;
        font-size: 0.78rem;
        color: var(--text-secondary);
        opacity: 0.85;
      }

      .sent .message-info {
        color: rgba(255, 255, 255, 0.85);
      }

      .message-content {
        line-height: 1.6;
        font-size: 1.01rem;
        word-break: break-word;
      }

      .chat-input-area {
        padding: 18px 24px;
        border-top: 1px solid var(--border-color);
        background: rgba(255, 255, 255, 0.92);
        box-shadow: 0 -2px 8px rgba(67, 97, 238, 0.04);
      }

      .chat-form {
        display: flex;
        gap: 14px;
      }

      .message-input {
        flex: 1;
        padding: 13px 18px;
        border: 1.5px solid var(--border-color);
        border-radius: 10px;
        font-size: 1rem;
        outline: none;
        background: rgba(244, 246, 251, 0.7);
        transition: border-color 0.2s, background 0.2s;
      }

      .message-input:focus {
        border-color: var(--primary-color);
        background: #fff;
        box-shadow: 0 0 0 2px rgba(67, 97, 238, 0.13);
      }

      .send-button {
        padding: 13px 28px;
        background: linear-gradient(
          90deg,
          var(--primary-color) 60%,
          #6c63ff 100%
        );
        color: white;
        border: none;
        border-radius: 10px;
        font-size: 1rem;
        font-weight: 600;
        cursor: pointer;
        transition: background 0.2s, box-shadow 0.2s;
        box-shadow: 0 2px 8px rgba(67, 97, 238, 0.1);
      }

      .send-button:hover,
      .send-button:focus {
        background: var(--primary-dark);
      }

      .send-button:disabled {
        background: var(--border-color);
        cursor: not-allowed;
      }

      .chat-closed {
        padding: 24px;
        text-align: center;
        background: rgba(255, 248, 230, 0.95);
        border-radius: 10px;
        margin: 24px;
        border: 1.5px solid var(--warning-color);
        box-shadow: 0 2px 8px rgba(255, 193, 7, 0.07);
      }

      .chat-closed h3 {
        color: var(--warning-color);
        margin-bottom: 12px;
        font-weight: 600;
      }

      .countdown {
        font-weight: 600;
        color: var(--text-primary);
      }

      .logout-btn {
        display: inline-flex;
        align-items: center;
        gap: 6px;
        padding: 9px 18px;
        background: rgba(255, 255, 255, 0.7);
        color: var(--text-secondary);
        border: 1.5px solid var(--border-color);
        border-radius: 8px;
        font-size: 0.97rem;
        text-decoration: none;
        transition: all 0.2s;
        font-weight: 500;
        box-shadow: 0 1px 4px rgba(67, 97, 238, 0.06);
      }

      .logout-btn:hover {
        background: var(--error-color);
        color: #fff;
        border-color: var(--error-color);
      }

      .timestamp {
        font-size: 0.78rem;
        opacity: 0.7;
      }

      @media (max-width: 900px) {
        .chat-app {
          max-width: 98vw;
        }
      }
      @media (max-width: 768px) {
        .chat-app {
          height: 100vh;
          border-radius: 0;
        }
        .chat-header,
        .chat-status,
        .chat-input-area {
          padding-left: 10px;
          padding-right: 10px;
        }
        .chat-messages {
          padding-left: 10px;
          padding-right: 10px;
        }
        .message {
          max-width: 90%;
        }
      }
      @media (max-width: 480px) {
        .chat-header h2 {
          font-size: 1.05rem;
        }
        .user-avatar {
          width: 32px;
          height: 32px;
          font-size: 1rem;
        }
        .chat-closed {
          margin: 10px;
          padding: 14px;
        }
      }
      @keyframes fadeIn {
        from {
          opacity: 0;
          transform: translateY(10px);
        }
        to {
          opacity: 1;
          transform: translateY(0);
        }
      }
    </style>
  </head>
  <body>
    <div class="container">
      <div class="chat-app">
        <div class="chat-header">
          <h2>Someone is Around You ðŸ‘€</h2>
          <div class="user-info">
            <div class="user-avatar">
              <%= currentUser.username.charAt(0).toUpperCase() %>
            </div>
            <span><%= currentUser.username %></span>
          </div>
        </div>

        <div class="chat-status">
          <div class="status-indicator">
            <div class="indicator-dot"></div>
            <% if(chatOpen){ %>
            <span>Chat is active</span>
            <% } else { %>
            <span>Chat is closed</span>
            <% } %>
          </div>
          <a href="/logout" class="logout-btn">
            <svg
              width="16"
              height="16"
              viewBox="0 0 24 24"
              fill="none"
              stroke="currentColor"
              stroke-width="2"
              stroke-linecap="round"
              stroke-linejoin="round"
            >
              <path d="M9 21H5a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h4"></path>
              <polyline points="16 17 21 12 16 7"></polyline>
              <line x1="21" y1="12" x2="9" y2="12"></line>
            </svg>
            Logout
          </a>
        </div>

        <% if (!chatOpen) { %>
        <div class="chat-closed">
          <h3>Chat is currently closed</h3>
          <p>The chat is available daily during specific hours.</p>
          <p class="countdown" id="countdown">Loading countdown...</p>
        </div>
        <% } else { %>
        <div class="chat-open">
          <h3>Chat is OPEN âœ…</h3>
          <p class="countdown" id="countdown">Will close in...</p>
        </div>
        <% } %>

        

        <div class="chat-messages" id="messages">
          <!-- Messages will appear here -->
        </div>

        <% if(chatOpen){ %>
        <div class="chat-input-area">
          <form class="chat-form" id="messageForm" autocomplete="off">
            <input
              type="text"
              class="message-input"
              id="messageInput"
              placeholder="Type your message..."
              autocomplete="off"
              required
            />
            <button type="submit" class="send-button">Send</button>
          </form>
        </div>
        <% } %>
      </div>
    </div>

    <script src="/socket.io/socket.io.js"></script>
    <script>
              const socket = io();
              const messagesDiv = document.getElementById('messages');
              const form = document.getElementById('messageForm');
              const input = document.getElementById('messageInput');
              let userLocation = null;

              // Format timestamp
              function formatTime(date) {
                  return new Date(date).toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });
              }

              // Update countdown timer
              function updateCountdown() {
                  const countdownEl = document.getElementById('countdown');
                  if (!countdownEl) return;

                  const now = new Date();
                  let nextOpen = new Date();
                  nextOpen.setHours(9, 0, 0, 0);

                  // If it's already past 9 AM today, set for tomorrow
                  if (now.getHours() >= 9) {
                      nextOpen.setDate(now.getDate() + 1);
                  }

                  const diff = nextOpen - now;
                  const hrs = Math.floor(diff / 1000 / 60 / 60);
                  const mins = Math.floor((diff / 1000 / 60) % 60);

                  countdownEl.textContent = `Opens in ${hrs} hours ${mins} minutes`;
              }

              if (!<%= chatOpen %>) {
                  updateCountdown();
                  setInterval(updateCountdown, 60000); // Update every minute
              }

              // Get user location
              function getLocation() {
                  return new Promise((resolve, reject) => {
                      if (navigator.geolocation) {
                          navigator.geolocation.getCurrentPosition(
                              position => resolve({
                                  lat: position.coords.latitude,
                                  lng: position.coords.longitude
                              }),
                              error => {
                                  console.error('Geolocation error:', error);
                                  // Show a more professional error message
                                  const errorMessage = document.createElement('div');
                                  errorMessage.className = 'message received';
                                  errorMessage.innerHTML = `
                                      <div class="message-info">
                                          <span>System</span>
                                          <span class="timestamp">${formatTime(new Date())}</span>
                                      </div>
                                      <div class="message-content">
                                          Please enable location services to participate in the chat.
                                      </div>
                                  `;
                                  messagesDiv.appendChild(errorMessage);
                                  messagesDiv.scrollTop = messagesDiv.scrollHeight;
                                  reject(error);
                              },
                              { timeout: 10000 }
                          );
                      } else {
                          reject(new Error('Geolocation is not supported by this browser.'));
                      }
                  });
              }

              // Initialize chat
              async function initChat() {
                  try {
                      userLocation = await getLocation();
                      await fetch('/update-location', {
                          method: 'POST',
                          headers: { 'Content-Type': 'application/json' },
                          body: JSON.stringify({
                              latitude: userLocation.lat,
                              longitude: userLocation.lng
                          })
                      });
                      socket.emit('joinNearby');
                  } catch (error) {
                      console.error('Location error:', error);
                  }
              }



            //   formating the time
              function formatTime(date) {
        const now = new Date();
        const past = new Date(date);
        const diffMs = now - past;

        const minutes = Math.floor(diffMs / (1000 * 60));
        const hours = Math.floor(minutes / 60);
        const days = Math.floor(hours / 24);

        if (days > 0) return `${days}d ${hours % 24}h ago`;
        if (hours > 0) return `${hours}h ${minutes % 60}min ago`;
        if (minutes > 0) return `${minutes}min ago`;
        return "just now";
      }


              // Receive past messages
              socket.on('pastMessages', messages => {
                  messagesDiv.innerHTML = '';
                  messages.forEach(msg => {
                      const messageClass = msg.username === '<%= currentUser.username %>' ? 'sent' : 'received';
                      const messageElement = document.createElement('div');
                      messageElement.className = `message ${messageClass}`;
                      messageElement.innerHTML = `
                          <div class="message-info">
                              <span>${msg.username}</span>
                               <span class="timestamp">${formatTime(msg.createdAt)}</span>
                          </div>
                          <div class="message-content">${msg.msg}</div>
                      `;
                      messagesDiv.appendChild(messageElement);
                  });
                  messagesDiv.scrollTop = messagesDiv.scrollHeight;
              });

              // Receive new messages
              socket.on('message', data => {
                  const messageClass = data.user === '<%= currentUser.username %>' ? 'sent' : 'received';
                  const messageElement = document.createElement('div');
                  messageElement.className = `message ${messageClass}`;
                  messageElement.innerHTML = `
                      <div class="message-info">
                          <span>${data.user}</span>
                          <span class="timestamp">${formatTime(data.timestamp)}</span>
                      </div>
                      <div class="message-content">${data.msg}</div>
                  `;
                  messagesDiv.appendChild(messageElement);
                  messagesDiv.scrollTop = messagesDiv.scrollHeight;
              });

              // Send message
              if (form) {
                  form.addEventListener('submit', async (e) => {
                      e.preventDefault();
                      if (!input.value.trim()) return;

                      if (!userLocation) {
                          try {
                              userLocation = await getLocation();
                              await fetch('/update-location', {
                                  method: 'POST',
                                  headers: { 'Content-Type': 'application/json' },
                                  body: JSON.stringify({
                                      latitude: userLocation.lat,
                                      longitude: userLocation.lng
                                  })
                              });
                          } catch (error) {
                              console.error('Failed to get location:', error);
                              return;
                          }
                      }

                      socket.emit('message', input.value.trim(), userLocation);
                      input.value = '';
                      input.focus();
                  });
              }

              // Initialize the chat when the page loads
              document.addEventListener('DOMContentLoaded', initChat);
    </script>



<script>
          const nextChatTime = <%= nextChatTime %>; // timestamp from server
          const type = "<%= nextChatType %>"; // "open" or "close"

          function updateCountdown() {
            const now = Date.now();
            const diff = nextChatTime - now;

            if (diff <= 0) {
              document.getElementById("countdown").textContent = "Refreshing...";
              location.reload(); // reload page when event happens
              return;
            }

            const hrs = Math.floor(diff / 1000 / 60 / 60);
            const mins = Math.floor((diff / 1000 / 60) % 60);
            const secs = Math.floor((diff / 1000) % 60);

            document.getElementById("countdown").textContent =
              (type === "open" ? "Opens in " : "Closes in ") +
              `${hrs}h ${mins}m ${secs}s`;
          }

          setInterval(updateCountdown, 1000);
          updateCountdown();
        </script>
  </body>
</html>
